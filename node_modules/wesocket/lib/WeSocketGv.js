"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _WeSocket = require("WeSocket");

var _WeSocket2 = _interopRequireDefault(_WeSocket);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WeSocketGv = function () {
    function WeSocketGv(_ref) {
        var _this = this;

        var url = _ref.url,
            name = _ref.name,
            group = _ref.group,
            role = _ref.role,
            _ref$reconnect = _ref.reconnect,
            reconnect = _ref$reconnect === undefined ? true : _ref$reconnect;
        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        _classCallCheck(this, WeSocketGv);

        this.socket = new _WeSocket2.default(url, { name: name, group: group, role: role });
        var customEvents = function customEvents(message) {
            console.debug(message);
        };
        this.events = {
            connected: function connected() {},
            disconnect: function disconnect() {},
            error: function error(_error) {
                return console.error(_error);
            }
        };
        this.socket.on("error", function (error) {
            _this.events.error(error);
        }).on("close", function () {
            _this.events.disconnect();
        }).on(["broadcast", "group", "role", "notice"], function (event, message, id, timestamp) {
            if (!_this.events[event]) {
                console.warn("Event \u3010" + event + "\u3011is not listen, eg: socket.on('" + event + "')");
                return;
            }
            _this.events[event].call(_this, message, timestamp);
        }).connect({
            reconnect: reconnect,
            ready: function ready() {
                _this.events.connected();
            },
            debug: debug
        });
    }

    _createClass(WeSocketGv, [{
        key: "on",
        value: function on(event, handler) {
            this.events[event] = handler;
        }
    }, {
        key: "send",
        value: function send(message, event) {
            this.socket.send(message, event);
        }
    }, {
        key: "reconnect",
        value: function reconnect() {
            this.socket.reconnect();
        }
    }, {
        key: "disconnect",
        value: function disconnect() {
            this.socket.disconnect();
        }
    }]);

    return WeSocketGv;
}();

exports.default = WeSocketGv;